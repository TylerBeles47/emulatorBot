
import OpenAI from 'openai';
import * as dotenv from 'dotenv';

// --- Step 1: Initialize Libraries ---
// Load environment variables from your .env file
dotenv.config();

// Initialize the OpenAI client with the API key from the .env file
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
});


/**
 * Generates a unique, human-like comment using the OpenAI API based on the post's caption.
 * This function is now async as it makes a network request.
 * @param {string} caption The caption of the Instagram post.
 * @returns {Promise<string>} A relevant comment generated by the AI.
 */
async function generateComment(caption: string): Promise<string> {
    // If the caption is empty or too short, return a generic comment immediately.
    if (!caption || caption.trim().length < 5) {
        return 'Looks great! ✨';
    }

    // This is the "prompt" you send to the AI.
    // It gives the AI context and instructions for the kind of comment you want.
    const prompt = `
        You are an enthusiastic and friendly Instagram user.
        Your task is to write a short, positive, and engaging comment for an Instagram post.

        Rules:
        - The comment must be 1-2 sentences long.
        - Use 1 or 2 relevant emojis.
        - Sound natural and not like a bot.
        - Do not use hashtags.
        - Base the comment on the post's caption below.

        Post Caption: "${caption}"
    `;

    try {
        console.log('Contacting OpenAI to generate a comment...');
        const response = await openai.chat.completions.create({
            model: "gpt-3.5-turbo", // A fast and cost-effective model for this task
            messages: [{
                role: "user",
                content: prompt,
            }],
            max_tokens: 60,       // Restricts the length of the response
            temperature: 0.8,     // Makes the output creative but not too random
        });

        // Safely extract the comment from the AI's response
        const comment = response.choices[0]?.message?.content?.trim();
        
        // If a valid comment was generated, return it. Otherwise, use a fallback.
        return comment || 'Love this post! 🙌';

    } catch (error) {
        console.error("Error calling OpenAI API:", error);
        // If the API call fails, return a safe, generic comment so the script doesn't stop.
        return 'Awesome post! 👍';
    }
}

describe('Instagram Loop Commenting with OpenAI', () => {

    // This test assumes you are already on a post grid (e.g., for a location or hashtag).
    it('should loop through and comment on 5 specific posts using AI-generated comments', async () => {

        console.log('--- Starting AI Comment Loop ---');
        await driver.pause(3000);

        // Define the specific grid positions of the posts to comment on
        const postCoordinates = [
            { row: 1, col: 1 },
            { row: 1, col: 2 },
            { row: 1, col: 3 },
            { row: 2, col: 1 },
            { row: 2, col: 2 }
        ];

        let postsCommented = 0;

        for (const coords of postCoordinates) {
            console.log(`\n--- Attempting to process post at row ${coords.row}, column ${coords.col} ---`);

            const postSelector = `//android.widget.Button[contains(@content-desc, "row ${coords.row}, column ${coords.col}")]`;
            const postButton = await $(postSelector);

            try {
                await postButton.waitForDisplayed({ timeout: 10000 });
                await postButton.click();
                console.log(`Clicked on post at row ${coords.row}, column ${coords.col}.`);
            } catch (error) {
                console.error(`Could not find or click post at row ${coords.row}, column ${coords.col}. Skipping.`);
                continue; // Skip to the next post if this one isn't found
            }
            
            await driver.pause(2000);

            // --- Commenting Logic using OpenAI ---
            const commentButton = await $('id:com.instagram.android:id/row_feed_button_comment');
            await commentButton.waitForDisplayed({ timeout: 10000 });
            await commentButton.click();
            await driver.pause(2000);

            const captionElement = await $('(//android.widget.TextView[@resource-id="com.instagram.android:id/row_comment_textview_comment"])[1]');
            await captionElement.waitForDisplayed({ timeout: 15000 });
            const captionText = await captionElement.getText();
            
            // **IMPORTANT:** We now use 'await' because generateComment makes an API call.
            const commentToPost = await generateComment(captionText);
            
            console.log(`Generated AI Comment: "${commentToPost}"`);

            const commentInput = await $('id:com.instagram.android:id/layout_comment_thread_edittext');
            await commentInput.setValue(commentToPost);
            await driver.pause(1000);

            const postCommentButton = await $('id:com.instagram.android:id/layout_comment_thread_post_button');
            await postCommentButton.click();
            postsCommented++;
            console.log(`Posted comment #${postsCommented}.`);
            await driver.pause(3000);

            // --- Navigate back to the grid to continue the loop ---
            console.log('Navigating back to the post grid...');
            await driver.back(); // Back from comments screen to the post
            await driver.pause(1000);
            await driver.back(); // Back from the post to the grid
            await driver.pause(1000);
            await driver.back(); // Third back action as requested
            await driver.pause(2000); // Wait for grid to be stable
        }

        console.log(`\n✅ SUCCESS: Finished the loop. Commented on ${postsCommented} posts using OpenAI.`);
    });
});